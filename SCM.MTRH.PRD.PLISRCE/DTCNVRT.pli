 /* DTCNVRT: CLSMVS: CONVERT A CHAR DATE FROM ONE FORMAT TO ANOTHER   */
 /* CHARACTER FORMAT                                                  */
 /* OWNING SYSTEM  : MTRH <-- APPLICATION SYSTEM ID OF THIS PROGRAM   */
 /*********************************************************************/
 /*                                                                   */
 /* WHEN       WHO  CR #     WHAT                                     */
 /* ---------- ---- -------- ---------------------------------------- */
 /* 1998-02-24 HJB  C980241  CREATE                                   */
 /* 1998-03-30 HJB  C980241  Q.A. CHANGES                             */
 /* 1998-05-11 HJB  C980411  ADD DATE EDIT LOGIC                      */
 /*********************************************************************/
 /*                                                                   */
 /* PROGRAM OVERVIEW:                                                 */
 /* ----------------                                                  */
 /*                                                                   */
 /* CONVERT A CHARACTER FORMAT DATE TO A NEW CHARACTER FORMAT. THE    */
 /* INPUT AND OUT PUT FORMATS ARE SUPPLIED BY THE CALLING ROUTINE.    */
 /* THE CENTURY WILL BE DETERMINED BY CALLING THE DTSLIDE ROUTINE     */
 /* SHOULD A CENTURY VALUE BE REQUIRED.                               */
 /* THIS ROUTINE ASSUMES THAT THE INPUT DATE HAS BEEN PREEDITED AND   */
 /* IS VALID.                                                         */
 /*********************************************************************/
1DTCNVRT: PROC (DTCNVRT_PTR)
          REORDER;
1  /*----------------------------------------------------------------*/
   /*  DCLS .... PARAMETERS / LOCAL VARIABLES
   /*----------------------------------------------------------------*/
   %INCLUDE DTCNVRTP;
   %INCLUDE DTEDIT;
   %INCLUDE DTSLIDE;
   %INCLUDE DTFORMAT;
   %INCLUDE DTCOMMON;
   DCL ADDR                       BUILTIN;
   DCL SUBSTR                     BUILTIN;
   DCL VERIFY                     BUILTIN;
   DCL WS_YEAR                    CHAR(04) INIT('    ');
   DCL 1 WS_YEAR_CHAR             BASED(ADDR(WS_YEAR)),
         3 WS_CC                  CHAR(02),
         3 WS_YY                  CHAR(02);
   DCL 1 WS_YEAR_PIC              BASED(ADDR(WS_YEAR)),
         3 WS_CC_PIC              PIC'99',
         3 WS_YY_PIC              PIC'99';
   DCL WS_WINDOW_LMT_CHAR         CHAR(02)
                                  BASED(ADDR(DTCNVRT_WORK.WINDOW_LMT));
   DCL WS_MM                      CHAR(02) INIT('  ');
   DCL WS_MM_PIC                  PIC'99'  BASED(ADDR(WS_MM));
   DCL WS_MMM                     CHAR(03) INIT('   ');
   DCL WS_DD                      CHAR(02) INIT('  ');
   DCL WS_MONTHS(12)              CHAR(03) INIT('JAN','FEB','MAR',
                                                'APR','MAY','JUN',
                                                'JUL','AUG','SEP',
                                                'OCT','NOV','DEC');
   DCL I                          FIXED BIN(15) INIT(0);
   DCL WS_FOUND                   BIT(1) INIT('0'B);
   DCL NUMERIC                    CHAR(10) INIT('0123456789');
1/********************************************************************/
 /*  MAINLINE
 /********************************************************************/
0DTCNVRT_WORK.OUTPUT_DATA       = '';
 DTEDIT_WORK = '';
 DTEDIT_WORK.INPUT_DATE = SUBSTR(DTCNVRT_WORK.INPUT_DATE,1,10);
 DTEDIT_WORK.INPUT_FORMAT = DTCNVRT_WORK.INPUT_FORMAT;
 DTEDIT_WORK.WINDOW_LMT   = DTCNVRT_WORK.WINDOW_LMT;
 IF ^(DTEDIT(DTEDIT_PTR))
 THEN
    DO;
       DTCNVRT_WORK.RETURN_CODE = DTEDIT_WORK.RETURN_CODE;
       DTCNVRT_WORK.OUTPUT_DATE = '';
       RETURN;
    END;
0IF VERIFY(WS_WINDOW_LMT_CHAR,NUMERIC) ^= 0
 THEN
    DO;
       DTCNVRT_WORK.RETURN_CODE = 8;
       DTCNVRT_WORK.OUTPUT_DATE = '';
       RETURN;
    END;
 WS_DATE_PTR                     = ADDR(WS_DATE_STRING);
 WS_DATE_STRING                  = DTCNVRT_WORK.INPUT_DATE;
 CALL A100_PROCESS_INPUT;
 WS_DATE_STRING                  = '';
 IF DTCNVRT_WORK.RETURN_CODE = 0
 THEN
    DO;
       CALL A200_FORMAT_OUTPUT;
       DTCNVRT_WORK.OUTPUT_DATE        = WS_DATE_STRING;
    END;
 RETURN;
1/********************************************************************/
 /*  PARSE THE INPUT DATE INTO DAY, MONTH, YEAR AND CENTURY FIELDS
 /********************************************************************/
0A100_PROCESS_INPUT: PROC;
0SELECT(DTCNVRT_WORK.INPUT_FORMAT);
0   WHEN(DDMMYY)
       DO;
         WS_DD                   = WS_DDMMYY_DT.DD;
         WS_MM                   = WS_DDMMYY_DT.MM;
         WS_YY                   = WS_DDMMYY_DT.YY;
         CALL A110_DETERMINE_CENTURY;
         CALL A130_DETERMINE_MMM;
       END;
0   WHEN(DDMMMYY)
       DO;
         WS_DD                   = WS_DDMMMYY_DT.DD;
         WS_MMM                  = WS_DDMMMYY_DT.MMM;
         WS_YY                   = WS_DDMMMYY_DT.YY;
         CALL A110_DETERMINE_CENTURY;
         CALL A120_DETERMINE_MM;
       END;
0   WHEN(YYMMDD)
       DO;
         WS_DD                   = WS_YYMMDD_DT.DD;
         WS_MM                   = WS_YYMMDD_DT.MM;
         WS_YY                   = WS_YYMMDD_DT.YY;
         CALL A110_DETERMINE_CENTURY;
         CALL A130_DETERMINE_MMM;
       END;
0   WHEN(YYMMMDD)
       DO;
         WS_DD                   = WS_YYMMMDD_DT.DD;
         WS_MMM                  = WS_YYMMMDD_DT.MMM;
         WS_YY                   = WS_YYMMMDD_DT.YY;
         CALL A110_DETERMINE_CENTURY;
         CALL A120_DETERMINE_MM;
       END;
0   WHEN(YY_MM_DD)
       DO;
         WS_DD                   = WS_YY_MM_DD_DT.DD;
         WS_MM                   = WS_YY_MM_DD_DT.MM;
         WS_YY                   = WS_YY_MM_DD_DT.YY;
         CALL A110_DETERMINE_CENTURY;
         CALL A130_DETERMINE_MMM;
       END;
0   WHEN(DDMMCCYY)
       DO;
         WS_DD                   = WS_DDMMCCYY_DT.DD;
         WS_MM                   = WS_DDMMCCYY_DT.MM;
         WS_YY                   = WS_DDMMCCYY_DT.YY;
         WS_CC                   = WS_DDMMCCYY_DT.CC;
         CALL A130_DETERMINE_MMM;
       END;
0   WHEN(DDMMMCCYY)
       DO;
         WS_DD                   = WS_DDMMMCCYY_DT.DD;
         WS_MMM                  = WS_DDMMMCCYY_DT.MMM;
         WS_YY                   = WS_DDMMMCCYY_DT.YY;
         WS_CC                   = WS_DDMMMCCYY_DT.CC;
         CALL A120_DETERMINE_MM;
       END;
0   WHEN(CCYYMMDD)
       DO;
         WS_DD                   = WS_CCYYMMDD_DT.DD;
         WS_MM                   = WS_CCYYMMDD_DT.MM;
         WS_YY                   = WS_CCYYMMDD_DT.YY;
         WS_CC                   = WS_CCYYMMDD_DT.CC;
         CALL A130_DETERMINE_MMM;
       END;
0   WHEN(CCYYMMMDD)
       DO;
         WS_DD                   = WS_CCYYMMMDD_DT.DD;
         WS_MMM                  = WS_CCYYMMMDD_DT.MMM;
         WS_YY                   = WS_CCYYMMMDD_DT.YY;
         WS_CC                   = WS_CCYYMMMDD_DT.CC;
         CALL A120_DETERMINE_MM;
       END;
0   WHEN(CCYY_MM_DD)
       DO;
         WS_DD                   = WS_CCYY_MM_DD_DT.DD;
         WS_MM                   = WS_CCYY_MM_DD_DT.MM;
         WS_YY                   = WS_CCYY_MM_DD_DT.YY;
         WS_CC                   = WS_CCYY_MM_DD_DT.CC;
         CALL A130_DETERMINE_MMM;
       END;
0   OTHERWISE
       DTCNVRT_WORK.RETURN_CODE  = 8;
0END;
 END A100_PROCESS_INPUT;
1/********************************************************************/
 /*  DETERMINE A VALUE FOR THE CENTURY TO BE USED IN THE DATE
 /*  CONVERSION
 /********************************************************************/
0A110_DETERMINE_CENTURY: PROC;
0/* ONLY CALCULATE CENTURY IF REQUIRED FOR OUTPUT                    */
0IF DTCNVRT_WORK.OUTPUT_FORMAT = CCYYMMDD |
    DTCNVRT_WORK.OUTPUT_FORMAT = DDMMCCYY |
    DTCNVRT_WORK.OUTPUT_FORMAT = DDMMMCCYY |
    DTCNVRT_WORK.OUTPUT_FORMAT = CCYYMMMDD |
    DTCNVRT_WORK.OUTPUT_FORMAT = CCYY_MM_DD
 THEN
0   /* ENSURE THAT THE VALUE IS VALID NUMERIC REPRESENTION OF A YEAR */
    /* BEFORE CALLING DTSLIDE TO RETURN A VALID YEAR                 */
0   IF VERIFY(WS_YY,NUMERIC) = 0
    THEN
       DO;
          DTSLIDE_WORK.WINDOW_LMT         = DTCNVRT_WORK.WINDOW_LMT;
          DTSLIDE_WORK.INPUT_YY           = WS_YY_PIC;
          CALL DTSLIDE(DTSLIDE_PTR);
          WS_YEAR                         = DTSLIDE_WORK.OUTPUT_YEAR;
          DTCNVRT_WORK.RETURN_CODE        = DTSLIDE_WORK.RETURN_CODE;
       END;
0   ELSE
       DTCNVRT_WORK.RETURN_CODE  = 8;
 END A110_DETERMINE_CENTURY;
0/********************************************************************/
 /*  CONVERT THE 3 CHARACTER ABBREVIATION FOR A MONTH TO ITS 2 DIGIT
 /*  NUMERIC REPRESENTATION
 /********************************************************************/
0A120_DETERMINE_MM: PROC;
0/* ONLY CALCULATE MM IF REQUIRED FOR OUTPUT                         */
0IF ^(DTCNVRT_WORK.OUTPUT_FORMAT = DDMMMYY  |
      DTCNVRT_WORK.OUTPUT_FORMAT = YYMMMDD  |
      DTCNVRT_WORK.OUTPUT_FORMAT = DDMMMCCYY |
      DTCNVRT_WORK.OUTPUT_FORMAT = CCYYMMMDD)
 THEN
    DO;
       WS_FOUND = '0'B;
0      /* LOOP THROUGH THE ARRAY OF ABBR UNTIL A MATCH IS FOUND       */
0      DO I = 1 TO 12 WHILE(^WS_FOUND);
          IF WS_MONTHS(I) = WS_MMM
          THEN
             DO;
                WS_MM_PIC = I;
                WS_FOUND  = '1'B;
             END;
       END;
0      /* IF NO MATCH HAS BEEN FOUND THEN INDICATE AN ERROR           */
0      IF ^WS_FOUND
       THEN
          DTCNVRT_WORK.RETURN_CODE  = 8;
    END;
 END A120_DETERMINE_MM;
0/********************************************************************/
 /*  CONVERT THE 2 DIGIT NUMERIC REPRESENTATION OF A MONTH TO ITS 3
 /*  CHARACTER ABBREVIATION
 /********************************************************************/
0A130_DETERMINE_MMM: PROC;
0/* ONLY CALCULATE MMM IF REQUIRED FOR OUTPUT                       */
0IF (DTCNVRT_WORK.OUTPUT_FORMAT = DDMMMYY  |
     DTCNVRT_WORK.OUTPUT_FORMAT = YYMMMDD  |
     DTCNVRT_WORK.OUTPUT_FORMAT = DDMMMCCYY |
     DTCNVRT_WORK.OUTPUT_FORMAT = CCYYMMMDD)
 THEN
0   /* ENSURE THAT THE VALUE IS VALID NUMERIC REPRESENTION OF A     */
    /* MONTH BEFORE ATTEMPTING THE CONVERSION                       */
0   IF VERIFY(WS_MM,NUMERIC) = 0
    THEN
       IF WS_MM_PIC > 0 & WS_MM_PIC < 13
       THEN
          WS_MMM = WS_MONTHS(WS_MM_PIC);
       ELSE
          DTCNVRT_WORK.RETURN_CODE  = 8;
    ELSE
       DTCNVRT_WORK.RETURN_CODE  = 8;
 END A130_DETERMINE_MMM;
1/********************************************************************/
 /*  BUILD THE DATE IN THE FORMAT REQUESTED BY THE CALLING PROGRAM
 /********************************************************************/
0A200_FORMAT_OUTPUT: PROC;
0SELECT(OUTPUT_FORMAT);
0   WHEN(DDMMYY)
       DO;
          WS_DDMMYY_DT.DD           = WS_DD;
          WS_DDMMYY_DT.MM           = WS_MM;
          WS_DDMMYY_DT.YY           = WS_YY;
          /* NON-COMPLIANT DATE REQUESTED, SET RETURN CODE TO 4      */
          DTCNVRT_WORK.RETURN_CODE  = 4;
       END;
0   WHEN(DDMMMYY)
       DO;
          WS_DDMMMYY_DT.DD          = WS_DD;
          WS_DDMMMYY_DT.MMM         = WS_MMM;
          WS_DDMMMYY_DT.YY          = WS_YY;
          /* NON-COMPLIANT DATE REQUESTED, SET RETURN CODE TO 4      */
          DTCNVRT_WORK.RETURN_CODE  = 4;
       END;
0   WHEN(YYMMDD)
       DO;
          WS_YYMMDD_DT.DD           = WS_DD;
          WS_YYMMDD_DT.MM           = WS_MM;
          WS_YYMMDD_DT.YY           = WS_YY;
          /* NON-COMPLIANT DATE REQUESTED, SET RETURN CODE TO 4      */
          DTCNVRT_WORK.RETURN_CODE  = 4;
       END;
0   WHEN(YYMMMDD)
       DO;
          WS_YYMMMDD_DT.DD          = WS_DD;
          WS_YYMMMDD_DT.MMM         = WS_MMM;
          WS_YYMMMDD_DT.YY          = WS_YY;
          /* NON-COMPLIANT DATE REQUESTED, SET RETURN CODE TO 4      */
          DTCNVRT_WORK.RETURN_CODE  = 4;
       END;
0   WHEN(YY_MM_DD)
       DO;
          WS_YY_MM_DD_DT.DD        = WS_DD;
          WS_YY_MM_DD_DT.D1        = '-';
          WS_YY_MM_DD_DT.MM        = WS_MM;
          WS_YY_MM_DD_DT.D2        = '-';
          WS_YY_MM_DD_DT.YY        = WS_YY;
          /* NON-COMPLIANT DATE REQUESTED, SET RETURN CODE TO 4      */
          DTCNVRT_WORK.RETURN_CODE = 4;
       END;
0   WHEN(DDMMCCYY)
       DO;
          WS_DDMMCCYY_DT.DD       = WS_DD;
          WS_DDMMCCYY_DT.MM       = WS_MM;
          WS_DDMMCCYY_DT.YY       = WS_YY;
          WS_DDMMCCYY_DT.CC       = WS_CC;
       END;
0   WHEN(DDMMMCCYY)
       DO;
          WS_DDMMMCCYY_DT.DD      = WS_DD;
          WS_DDMMMCCYY_DT.MMM     = WS_MMM;
          WS_DDMMMCCYY_DT.YY      = WS_YY;
          WS_DDMMMCCYY_DT.CC      = WS_CC;
       END;
0   WHEN(CCYYMMDD)
       DO;
          WS_CCYYMMDD_DT.DD       = WS_DD;
          WS_CCYYMMDD_DT.MM       = WS_MM;
          WS_CCYYMMDD_DT.YY       = WS_YY;
          WS_CCYYMMDD_DT.CC       = WS_CC;
       END;
0   WHEN(CCYYMMMDD)
       DO;
          WS_CCYYMMMDD_DT.DD       = WS_DD;
          WS_CCYYMMMDD_DT.MMM      = WS_MMM;
          WS_CCYYMMMDD_DT.YY       = WS_YY;
          WS_CCYYMMMDD_DT.CC       = WS_CC;
       END;
0   WHEN(CCYY_MM_DD)
       DO;
          WS_CCYY_MM_DD_DT.DD      = WS_DD;
          WS_CCYY_MM_DD_DT.D1      = '-';
          WS_CCYY_MM_DD_DT.MM      = WS_MM;
          WS_CCYY_MM_DD_DT.D2      = '-';
          WS_CCYY_MM_DD_DT.YY      = WS_YY;
          WS_CCYY_MM_DD_DT.CC      = WS_CC;
       END;
0   OTHERWISE
       DTCNVRT_WORK.RETURN_CODE  = 8;
 END;
 END A200_FORMAT_OUTPUT;
-END DTCNVRT;
